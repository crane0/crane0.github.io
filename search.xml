<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo_next建站_常见问题</title>
    <url>/2020/04/14/hexo_next%E5%BB%BA%E7%AB%99_%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>hexo+next建站，常见问题汇总</p>
<a id="more"></a>

<h1 id="使用中文时的问题"><a href="#使用中文时的问题" class="headerlink" title="使用中文时的问题"></a>使用中文时的问题</h1><p>文章文件名中，不能包含中文，否则会有如下报错。</p>
<blockquote>
<p>文件的 title 属性 无所谓。</p>
</blockquote>
<p>错误：<a href="https://github.com/hexojs/hexo/issues/3859" target="_blank" rel="noopener">https://github.com/hexojs/hexo/issues/3859</a></p>
<p>解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>修改站点配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink.html</span></span><br><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<h1 id="配置个人域名时的问题"><a href="#配置个人域名时的问题" class="headerlink" title="配置个人域名时的问题"></a>配置个人域名时的问题</h1><p>将个人域名 <code>crane0.com</code> 解析到 <code>crane0.github.io</code> 之后，在该项目的 Settings 中添加配置</p>
<p><img src="https://crane0.oss-cn-beijing.aliyuncs.com/hexo-blog/1.jpg" alt="settings"></p>
<p>第二天时，当访问 <a href="http://crane0.com/" target="_blank" rel="noopener">http://crane0.com/</a> 时发现 404 了，查看上面设置的 Custom domain 竟然为空了。</p>
<ul>
<li>解决办法：</li>
</ul>
<p>在项目的根目录下新建 <code>CNAME</code> 文件（没有后缀名），输入自定义的域名保存即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.crane0.com</span><br></pre></td></tr></table></figure>

<p>之后在部署到 GitHub 时，就不会失效了。</p>
<h1 id="本地图片问题"><a href="#本地图片问题" class="headerlink" title="本地图片问题"></a>本地图片问题</h1><p>在 markdown 的语法中，插入图片的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![描述](图片路径)</span><br></pre></td></tr></table></figure>
<p>但是在 hexo 中貌似失效了。</p>
<p>比如，我的文件目录如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- _post</span><br><span class="line">  -- image</span><br><span class="line">    -- 1.jpg</span><br><span class="line">  -- test.md</span><br></pre></td></tr></table></figure>
<p>在 <code>test.md</code> 中插入图片 <code>![](./image/1.jpg)</code>，发现并没有效果。</p>
<p>在网页中查看该图片时，发现路径是 <code>http://localhost:4000/test/image/1.jpg</code>。</p>
<p>那就简单了，我在当前目录下新建一个和当前文件 <code>test.md</code> 同名的文件夹，放入图片即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- _post</span><br><span class="line">  -- test</span><br><span class="line">    -- 1.jpg</span><br><span class="line">  -- test.md</span><br></pre></td></tr></table></figure>
<p>解决。</p>
<p>另外，其实在站点的配置文件 <code>_config.yml</code> 中，修改 <code>post_asset_folder: true</code>，就可以在运行下面命令时，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new 新文件</span><br></pre></td></tr></table></figure>
<p>同时创建同名的文件夹。</p>
]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo_next建站_站点概览模块</title>
    <url>/2020/04/14/hexo_next%E5%BB%BA%E7%AB%99_%E7%AB%99%E7%82%B9%E6%A6%82%E8%A7%88%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>hexo_next建站，站点概览模块</p>
<a id="more"></a>

<h1 id="站点概览"><a href="#站点概览" class="headerlink" title="站点概览"></a>站点概览</h1><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><p>在主题配置中，搜索 <code>avatar</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  url: &#x2F;images&#x2F;avatar.jpg</span><br><span class="line">  rounded: true</span><br><span class="line">  rotated: false</span><br></pre></td></tr></table></figure>

<h2 id="头像下的个人介绍"><a href="#头像下的个人介绍" class="headerlink" title="头像下的个人介绍"></a>头像下的个人介绍</h2><p>在blog 根目录的配置文件 <code>_config.yml</code> 中，设置 <code>description</code> 即可。</p>
<h2 id="其他个人链接"><a href="#其他个人链接" class="headerlink" title="其他个人链接"></a>其他个人链接</h2><p>在主题配置中，搜索 <code>social</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;crane0 || fab fa-github</span><br><span class="line">  E-Mail: mailto:bhad5683126@gmail.com || fa fa-envelope</span><br><span class="line">  WeiXin: &#x2F;wechat || fa fa-weixin</span><br></pre></td></tr></table></figure>


<h2 id="个人微信二维码"><a href="#个人微信二维码" class="headerlink" title="个人微信二维码"></a>个人微信二维码</h2><p>因为需要展示一个图片，而原有的配置都是链接，</p>
<p>所以换个思路，新建一个路由，该页面只放一个图片即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page wechat</span><br></pre></td></tr></table></figure>

<p>在 <code>source</code> 目录下会新建一个文件夹，放入二维码图片，</p>
<p>修改 <code>wechat/index.md</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 扫描下面二维码添加微信</span><br><span class="line">---</span><br><span class="line">&lt;img src&#x3D;&quot;.&#x2F;wechat-pr.jpg&quot; style&#x3D;&quot;text-align:center; margin: auto; width: 150px&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next建站_基础</title>
    <url>/2020/04/14/hexo+next%E5%BB%BA%E7%AB%99_%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>hexo+next建站，基础配置</p>
<a id="more"></a>

<p>参考 <a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26625249</a></p>
<p>使用了 next 主题</p>
<p>下面的命令安装的是最新版本的 v7.x 的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>如果之前使用的是 v5.x 的，可以将后面的 <code>themes/next</code> 改为 <code>next-reloaded</code>，其实随便一个名字，然后在站点的配置项中修改主题名称即可。</p>
<h1 id="启用本地搜索"><a href="#启用本地搜索" class="headerlink" title="启用本地搜索"></a>启用本地搜索</h1><p>1，下载依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>2，在 <code>themes/next-reloaded/_config.yml</code> 中，搜索 <code>local_search</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enable: true</span><br></pre></td></tr></table></figure>

<p>完成配置</p>
<blockquote>
<p>还需配图</p>
</blockquote>
<h1 id="修改主题的风格"><a href="#修改主题的风格" class="headerlink" title="修改主题的风格"></a>修改主题的风格</h1><p>在 <code>themes/next-reloaded/_config.yml</code> 中，搜索 <code>Schemes</code>，有4中可以选择，我使用的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scheme: Mist</span><br></pre></td></tr></table></figure>

<h1 id="启用阅读量计数"><a href="#启用阅读量计数" class="headerlink" title="启用阅读量计数"></a>启用阅读量计数</h1><blockquote>
<p>下面的方法，在本地测试环境，显示的统计有问题，不用管。部署后显示就正常了。</p>
</blockquote>
<p>在 <code>themes/next-reloaded/_config.yml</code> 中，搜索<code>busuanzi_count</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enable: true</span><br></pre></td></tr></table></figure>

<h1 id="添加关于，分类，标签的导航栏"><a href="#添加关于，分类，标签的导航栏" class="headerlink" title="添加关于，分类，标签的导航栏"></a>添加关于，分类，标签的导航栏</h1><p>1，运行以下命令添加页面，会在 <code>source</code> 文件夹下分别创建3个文件夹，对应的有 <code>index.md</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<blockquote>
<p>页面生成后，默认会在侧边栏中展示出「分类」和 「标签」，但是无法点击。</p>
</blockquote>
<p>2，对于「关于」，可以直接在 <code>index.md</code> 中写内容即可。其他不用配置。</p>
<p>3，对于「分类」和 「标签」，需要再加一个 type 的配置，和 <code>title</code> 保持一致即可。</p>
<blockquote>
<p>如果没有 type 的配置，侧边栏的点击无效，对应的页面虽然会展示，但不会有内容。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-04-13 17:46:28</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-04-13 18:07:52</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>4，在主题的配置 <code>themes/next/_config.yml</code>中，搜索 <code>menu</code>，将对应的注释打开即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || fa fa-home</span><br><span class="line">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class="line">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br></pre></td></tr></table></figure>

<p>配置完成。</p>
<h1 id="页面动画效果"><a href="#页面动画效果" class="headerlink" title="页面动画效果"></a>页面动画效果</h1><p>1，在 <code>themes/next/_config.yml</code> 中 搜索 <code>motion</code>，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enable: false</span><br></pre></td></tr></table></figure>

<p>即可关闭所有动画，但其实动画是为了留点时间加载资源，完全禁止掉也不太好。</p>
<p>2，第2种方式，修改主题的源码。</p>
<p>在 <code>themes/next/source/js/motion.js</code>（低版本的不一定是 <code>motion.js</code>），应该也是类似的名称。。。</p>
<p>修改这个函数中的 <code>duration</code> 为 0，个人觉得是比较舒服的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getMistLineSettings(element, translateX) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    e: element,</span><br><span class="line">    p: &#123;translateX&#125;,</span><br><span class="line">    o: &#123;</span><br><span class="line">      duration     : 0,</span><br><span class="line">      sequenceQueue: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他的动画时间，可以在这个文件中搜索 <code>duration</code> 找到对应的更改即可。</p>
<h1 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h1><p>开启后，每篇文章下会有一个「打赏」按钮，点击后都会有支付二维码。</p>
<p>在主题配置中，搜索 <code>reward_settings</code>，<code>enable</code> 设置为 true 后就开启了。</p>
<p><code>reward</code> 对应的是二维码图片。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">这是捐赠说明语</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure>

<h1 id="文章更新时间"><a href="#文章更新时间" class="headerlink" title="文章更新时间"></a>文章更新时间</h1><p>在主题配置中，搜索 <code>post_meta</code>，<code>updated_at</code> 就是更新时间的配置，可以看到默认是开启的，但还需要其他的配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_meta:</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true</span><br><span class="line">  updated_at:</span><br><span class="line">    enable: true</span><br><span class="line">    another_day: true</span><br><span class="line">  categories: true</span><br></pre></td></tr></table></figure>
<p>在文章的 markdown 文件中，添加 <code>modified</code> 字段即可。</p>
<p>还要注意一点，只有当文章内容改变时，才会生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: test_my_site</span><br><span class="line">date: 2020-04-11 15:25:05</span><br><span class="line">modified: 2020-04-12 20:20:56</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h1 id="滚动条显示百分比"><a href="#滚动条显示百分比" class="headerlink" title="滚动条显示百分比"></a>滚动条显示百分比</h1><blockquote>
<p>这个之后会被顶部的进度条取代。不设置这个了</p>
</blockquote>
<p>在主题配置中，搜索 <code>back2top</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">back2top</span><br><span class="line">  scrollpercent: false</span><br></pre></td></tr></table></figure>

<h1 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h1><p>1，进入来必力官网，<a href="https://www.livere.com，注册登录成功后，在导航栏选择「安装」，" target="_blank" rel="noopener">https://www.livere.com，注册登录成功后，在导航栏选择「安装」，</a></p>
<p>2，选择 City版免费，填入相关信息拿到代码，（其实只需要 data-uid）</p>
<p>3，打开主题配置文件，搜索 <code>livere_uid</code>，填入即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">livere_uid: xxxx</span><br></pre></td></tr></table></figure>


<h1 id="添加文章字数统计和阅读时长，底部站点总字数"><a href="#添加文章字数统计和阅读时长，底部站点总字数" class="headerlink" title="添加文章字数统计和阅读时长，底部站点总字数"></a>添加文章字数统计和阅读时长，底部站点总字数</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<h2 id="站点配置文件-config-yml-新增如下："><a href="#站点配置文件-config-yml-新增如下：" class="headerlink" title="站点配置文件_config.yml 新增如下："></a>站点配置文件_config.yml 新增如下：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line"> #文章内是否显示</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line"> # 网页底部是否显示</span><br><span class="line">  total_symbols: true  # 显示站点总字数</span><br><span class="line">  total_time: false</span><br></pre></td></tr></table></figure>

<h2 id="主题配置文件-config-yml，搜索-symbols-count-time，"><a href="#主题配置文件-config-yml，搜索-symbols-count-time，" class="headerlink" title="主题配置文件_config.yml，搜索 symbols_count_time，"></a><strong>主题</strong>配置文件_config.yml，搜索 <code>symbols_count_time</code>，</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true  # false会显示一行</span><br><span class="line">  item_text_post: true  # 显示文字名称,设为false后只显示图标和统计数字,不显示文字名称</span><br><span class="line">  item_text_total: true # 底部footer是否显示站点字数统计属性文字</span><br><span class="line">  wpm: 275              # 一分钟阅读的字数，可不设置</span><br></pre></td></tr></table></figure>


<p>添加之后，本地测试环境的时长可能会显示 NaN，但不影响，部署后的正式环境没有问题。</p>
<h1 id="建站时间"><a href="#建站时间" class="headerlink" title="建站时间"></a>建站时间</h1><p>在主题配置中，搜索 <code>since</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  since: 2020 # 建站时间，默认当前年份</span><br></pre></td></tr></table></figure>

<h1 id="网站图标设置"><a href="#网站图标设置" class="headerlink" title="网站图标设置"></a>网站图标设置</h1><p>在主题配置中，搜索 <code>favicon</code>，修改图片即可。</p>
<blockquote>
<p>可以在这里找图标 </p>
</blockquote>
<ul>
<li><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a>   </li>
<li><a href="https://www.easyicon.net/" target="_blank" rel="noopener">https://www.easyicon.net/</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;favicon-16*16.png</span><br><span class="line">  medium: &#x2F;images&#x2F;favicon-32*32.png</span><br><span class="line">  apple_touch_icon: &#x2F;images&#x2F;favicon-32*32.png</span><br><span class="line">  safari_pinned_tab: &#x2F;images&#x2F;favicon-32*32.png</span><br></pre></td></tr></table></figure>

<h1 id="相关文章推荐"><a href="#相关文章推荐" class="headerlink" title="相关文章推荐"></a>相关文章推荐</h1><p>在每篇文章的最后，推荐相关标签的。</p>
<blockquote>
<p>必须有相同标签的文章，才会显示推荐的文章列表</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中，搜索 <code>related_posts</code>,</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="comment"># Custom header, leave empty to use the default one</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h1 id="首页显示摘要"><a href="#首页显示摘要" class="headerlink" title="首页显示摘要"></a>首页显示摘要</h1><p>首页默认是展示所有文章的所有内容，这样会导致内容过多，</p>
<p>首页显示摘要即可。</p>
<p>解决：</p>
<p>版本，next  v7.x</p>
<p>在文章中使用 <code>&lt;!-- more --&gt;</code> 来截断，上面的就是摘要，下面的是正文。并且会在首页的摘要中添加阅读全文的按钮。</p>
<p>7.6版本之前，通过在主题文件中，</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scroll_to_more:</span> <span class="literal">true</span>      <span class="comment"># 点击阅读全文后是否跳到&lt;!--more--&gt;标记处,设为false时点击阅读全文可以从头阅读</span></span><br><span class="line"></span><br><span class="line"><span class="attr">save_scroll:</span> <span class="literal">false</span>        <span class="comment"># 自动保存每篇文章或页面上一次滚动的地方</span></span><br><span class="line"></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span> <span class="comment"># 自动在首页对文章进行摘要描述作为前言文本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">auto_excerpt:</span>   <span class="comment"># 是否自动截取摘要</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 设置为true则自动截取150字当做首页摘要</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span>   <span class="comment"># 自动截取的字数</span></span><br></pre></td></tr></table></figure>

<h1 id="顶部加载资源滚动条"><a href="#顶部加载资源滚动条" class="headerlink" title="顶部加载资源滚动条"></a>顶部加载资源滚动条</h1><p>基于这个插件 <code>https://github.com/theme-next/theme-next-pace</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;next</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-pace source&#x2F;lib&#x2F;pace</span><br></pre></td></tr></table></figure>

<p>在主题配置文件，搜索 <code>pace</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pace:</span><br><span class="line">  enable: true</span><br><span class="line">  theme: minimal</span><br></pre></td></tr></table></figure>

<h1 id="代码块风格"><a href="#代码块风格" class="headerlink" title="代码块风格"></a>代码块风格</h1><p>next 使用的是 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">https://github.com/chriskempson/tomorrow-theme</a></p>
<p>在主题配置文件中，搜索 <code>codeblock</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  highlight_theme: normal</span><br><span class="line">  # 显示复制按钮</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # 复制成功后，按钮变✔️</span><br><span class="line">    show_result: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    # 2 中风格选择</span><br><span class="line">    style: mac</span><br></pre></td></tr></table></figure>

<h2 id="代码块顶部显示代码路径"><a href="#代码块顶部显示代码路径" class="headerlink" title="代码块顶部显示代码路径"></a>代码块顶部显示代码路径</h2><p>在三个冒号后添加 <code>html 路径即可</code></p>
<figure class="highlight html"><figcaption><span>a/b/c</span></figcaption><table><tr><td class="code"><pre><span class="line">const a = 123</span><br></pre></td></tr></table></figure>

<h1 id="顶部阅读进度条"><a href="#顶部阅读进度条" class="headerlink" title="顶部阅读进度条"></a>顶部阅读进度条</h1><p>在主题配置文件中，搜索 <code>reading_progress</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reading_progress:</span><br><span class="line">  enable: true</span><br><span class="line">  # Available values: top | bottom</span><br><span class="line">  position: top</span><br><span class="line">  color: &quot;#37c6c0&quot;</span><br><span class="line">  height: 3px</span><br></pre></td></tr></table></figure>

<h1 id="设置右上角-github-图标"><a href="#设置右上角-github-图标" class="headerlink" title="设置右上角 github 图标"></a>设置右上角 github 图标</h1><p>在主题配置文件中，搜索 <code>github_banner</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github_banner:</span><br><span class="line">  enable: true</span><br><span class="line">  permalink: https:&#x2F;&#x2F;github.com&#x2F;crane0&#x2F;crane0.github.io</span><br><span class="line">  title: Follow me on GitHub</span><br></pre></td></tr></table></figure>

<h1 id="设置阅读位置标记"><a href="#设置阅读位置标记" class="headerlink" title="设置阅读位置标记"></a>设置阅读位置标记</h1><blockquote>
<p>我未设置</p>
</blockquote>
<p>点击标签按钮，可以记住当前阅读位置，下次打开页面会自动到之前记忆的位置。</p>
<p>在主题配置文件中，搜索 <code>bookmark</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bookmark:</span><br><span class="line">  enable: true</span><br><span class="line">  # Customize the color of the bookmark.</span><br><span class="line">  color: &quot;#222&quot;</span><br><span class="line">  # If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span><br><span class="line">  # If manual, only save it by clicking the bookmark-icon.</span><br><span class="line">  save: auto</span><br></pre></td></tr></table></figure>

<h1 id="页面底部信息"><a href="#页面底部信息" class="headerlink" title="页面底部信息"></a>页面底部信息</h1><h2 id="页面底部信息居中显示"><a href="#页面底部信息居中显示" class="headerlink" title="页面底部信息居中显示"></a>页面底部信息居中显示</h2><p>如果使用的是 Mist 风格，在 <code>themes/next/source/css/_schemes/Muse</code> 文件夹下，搜索 <code>footer-inner</code>，将其值改为 <code>center</code> 即可。</p>
<blockquote>
<p>我用的 Muse 风格</p>
</blockquote>
<h2 id="隐藏-Hexo-和-NexT-信息"><a href="#隐藏-Hexo-和-NexT-信息" class="headerlink" title="隐藏 Hexo 和 NexT 信息"></a>隐藏 Hexo 和 NexT 信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  powered: false</span><br></pre></td></tr></table></figure>

<h2 id="文末版权声明"><a href="#文末版权声明" class="headerlink" title="文末版权声明"></a>文末版权声明</h2><p>在主题配置文件中，搜索 <code>creative_commons</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: true</span><br><span class="line">  post: true</span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure>

<p>改文章末尾就是例子，默认只展示这3个，对应文字的修改在 <code>themes/next/languages/zh-CN.yml</code> 搜索 <code>copyright</code></p>
<p>原始链接对应的地址的host，是在<strong>站点的配置文件</strong>中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: http:&#x2F;&#x2F;crane0.github.io</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>test_my_site</title>
    <url>/2020/04/11/test-my-site/</url>
    <content><![CDATA[<h1 id="这是-test-my-site-文章"><a href="#这是-test-my-site-文章" class="headerlink" title="这是 test-my-site 文章"></a>这是 test-my-site 文章</h1><p>做了一次更新<br>做了第2次更新</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this is'</span> <span class="number">123</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const a &#x3D; 1</span><br><span class="line"></span><br><span class="line">function() &#123;</span><br><span class="line">  console.log(&#39;this is&#39; 123)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// n 可以省略</span><br><span class="line">git <span class="built_in">log</span> -nx</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; n 可以省略</span><br><span class="line">git log -nx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>表格</tag>
        <tag>表单验证</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown特殊语法</title>
    <url>/2020/04/14/markdown%E7%89%B9%E6%AE%8A%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>不同的编译引擎，会有一些特殊的语法</p>
<a id="more"></a>

<p>参考 <a href="https://tding.top/archives/29bfe8c9.html" target="_blank" rel="noopener">https://tding.top/archives/29bfe8c9.html</a></p>
<h1 id="文本居中引用-Centered-Quote"><a href="#文本居中引用-Centered-Quote" class="headerlink" title="文本居中引用 - Centered Quote"></a>文本居中引用 - Centered Quote</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;世间所有的相遇，都是久别重逢&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>世间所有的相遇，都是久别重逢</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>

<h1 id="提示块-Note"><a href="#提示块-Note" class="headerlink" title="提示块 - Note"></a>提示块 - Note</h1><p>在主题配置文件中，可以修改风格</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Note tag (bs-callout)</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span> <span class="comment"># 是否显示图标</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>default 提示块标签</p>
          </div>

<div class="note primary">
            <p>primary 提示块标签</p>
          </div>

<div class="note success">
            <p>success 提示块标签</p>
          </div>

<div class="note info">
            <p>info 提示块标签</p>
          </div>

<div class="note warning">
            <p>warning 提示块标签</p>
          </div>

<div class="note danger">
            <p>danger 提示块标签</p>
          </div>

<h1 id="标签-Label"><a href="#标签-Label" class="headerlink" title="标签 - Label"></a>标签 - Label</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label default@默认 %&#125; &#123;% label primary@主要 %&#125; &#123;% label success@成功 %&#125; &#123;% label info@信息 %&#125; &#123;% label warning@警告 %&#125; &#123;% label danger@危险 %&#125;</span><br></pre></td></tr></table></figure>

<span class="label default">默认</span> <span class="label primary">主要</span> <span class="label success">成功</span> <span class="label info">信息</span> <span class="label warning">警告</span> <span class="label danger">危险</span> 

<h1 id="选项卡-Tabs"><a href="#选项卡-Tabs" class="headerlink" title="选项卡 - Tabs"></a>选项卡 - Tabs</h1><p>在主题配置文件中，可以修改风格</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tabs tag</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="attr">tabs:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs tab,1 %&#125; 名字为tab，默认在第1个选项卡，如果是-1则隐藏</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">选项卡 1 </span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">选项卡 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab A --&gt;</span><br><span class="line">选项卡 3</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">tab 1</a></li><li class="tab"><a href="#tab-2">tab 2</a></li><li class="tab"><a href="#tab-3">A</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><p>选项卡 1 </p></div><div class="tab-pane" id="tab-2"><p>选项卡 2</p></div><div class="tab-pane" id="tab-3"><p>选项卡 3</p></div></div></div>

<h1 id="按钮-Button"><a href="#按钮-Button" class="headerlink" title="按钮 - Button"></a>按钮 - Button</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% button url, text, icon [class], [title] %&#125;</span><br></pre></td></tr></table></figure>
<div class="text-center">
  <div>
    <a class="btn" href="https://crane0.github.io/ " title="这是博客首页">
            <i class="fa fa-home fa-fw"></i>首页
          </a> 
    <a class="btn" href="https://crane0.github.io/archives/ " title="这是归档">
            <i class="fa fa-archive fa-archive"></i>归档
          </a> 
    <a class="btn" href="https://crane0.github.io/tags/ " title="这是标签">
            <i class="fa fa-tags fa-tags"></i>标签
          </a>
  </div>
</div>
]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/04/11/test/</url>
    <content><![CDATA[<p>234</p>
<p><img src="./image/1.jpg" alt=""></p>
<p>123</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>表格</tag>
        <tag>表单验证</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode</title>
    <url>/2020/04/17/leetcode/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] !== <span class="number">0</span>) &#123;</span><br><span class="line">    arr[j] = arr[i]</span><br><span class="line">    <span class="keyword">if</span> (i !== j) &#123;</span><br><span class="line">      arr[i] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    j++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>this指向</title>
    <url>/2020/04/20/this%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<p>this 的指向，是在调用函数时，根据执行上下文动态确定的。</p>
<p>包括</p>
<ul>
<li>独立调用</li>
<li>隐式调用</li>
<li>显示绑定</li>
<li>new 调用</li>
<li>this 的优先级</li>
</ul>
<a id="more"></a>

<h1 id="独立调用"><a href="#独立调用" class="headerlink" title="独立调用"></a>独立调用</h1><p>函数在浏览器全局环境中被直接调用:</p>
<ul>
<li>非严格模式下 this 指向 window</li>
<li>在 use strict 指明严格模式的下是 undefined</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">f1() <span class="comment">// window</span></span><br><span class="line">f2() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>定时器中的函数调用，指向 window</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// window</span></span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="隐式调用"><a href="#隐式调用" class="headerlink" title="隐式调用"></a>隐式调用</h1><p>发生在上下文对象调用时，this 指向最后调用它的对象。</p>
<p>也就是说，在执行函数时，如果函数中的 this 是被上一级的对象所调用，那么 this 指向的就是上一级的对象；否则指向全局环境。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">'crane0'</span>,</span><br><span class="line">    brother: &#123;</span><br><span class="line">        name: <span class="string">'lufei'</span>,</span><br><span class="line">        fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.brother.fn()) <span class="comment">// `lufei`</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o1 = &#123;</span><br><span class="line">    text: <span class="string">'o1'</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.text</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> o2 = &#123;</span><br><span class="line">    text: <span class="string">'o2'</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.fn()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> o3 = &#123;</span><br><span class="line">    text: <span class="string">'o3'</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fn = o1.fn</span><br><span class="line">        <span class="keyword">return</span> fn()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o1.fn())  <span class="comment">// o1</span></span><br><span class="line"><span class="built_in">console</span>.log(o2.fn())  <span class="comment">// o1</span></span><br><span class="line"><span class="built_in">console</span>.log(o3.fn())</span><br></pre></td></tr></table></figure>

<p>最后一个会输出 <code>undefined</code>，因为最后在执行时，已经变为独立调用了。此时 <code>this</code> 指向 <code>window</code></p>
<p>问题来了，如何让 <code>console.log(o2.fn())</code> 输出 <code>o2</code> 呢？</p>
<blockquote>
<p>除了用 <code>bind/call/apply</code> 来对 this 的指向进行干预外，有没有其他的办法。</p>
</blockquote>
<p>进行如下改造即可，this 指向最后调用它的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o2 = &#123;</span><br><span class="line">    text: <span class="string">'o2'</span>,</span><br><span class="line">    fn: o1.fn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h2><p>指隐式绑定的函数丢失绑定对象，从而默认绑定到全局或者undefined（取决于是否使用严格模式）。</p>
<p><strong>隐式丢失实质上最后变成了独立调用</strong></p>
<blockquote>
<p>下面3种输出都为 undefined</p>
</blockquote>
<p>1，为函数调用创建别名</p>
<blockquote>
<p>虽然 fn 函数在 foo 对象中作为方法被引用，但在赋值给 f1 后，是在 window 全局环境中执行的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   a: <span class="number">66</span>,</span><br><span class="line">   foo: foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = obj.foo</span><br><span class="line">bar() <span class="comment">// 独立调用</span></span><br></pre></td></tr></table></figure>

<p>2，作为参数传递时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doFoo</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">   fn(); <span class="comment">// 独立调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">   a: <span class="number">66</span>,</span><br><span class="line">   foo: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doFoo(obj.foo)</span><br></pre></td></tr></table></figure>

<p>3，传给定时器函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">   a: <span class="number">66</span>,</span><br><span class="line">   foo: foo</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(obj.foo) <span class="comment">// 独立调用</span></span><br></pre></td></tr></table></figure>

<h1 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h1><p>通过 <code>bind/call/apply</code> 改变 this 指向。</p>
<p>三者异同点直接用代码表示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetObj = &#123;&#125;</span><br><span class="line">fn.call(targetObj, <span class="string">'arg1'</span>, <span class="string">'arg2'</span>)</span><br></pre></td></tr></table></figure>
<p>等于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetObj = &#123;&#125;</span><br><span class="line">fn.apply(targetObj, [<span class="string">'arg1'</span>, <span class="string">'arg2'</span>])</span><br></pre></td></tr></table></figure>
<p>等于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetObj = &#123;&#125;</span><br><span class="line">fn.bind(targetObj, <span class="string">'arg1'</span>, <span class="string">'arg2'</span>)()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，如果第一个参数为 <code>null</code> 或 <code>undefined</code>，那就绑定给了 window</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">    name: <span class="string">'crane0'</span>,</span><br><span class="line">    logName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bar = &#123;</span><br><span class="line">    name: <span class="string">'lufei'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo.logName.call(bar)) <span class="comment">// lufei</span></span><br></pre></td></tr></table></figure>

<h1 id="new-调用"><a href="#new-调用" class="headerlink" title="new 调用"></a>new 调用</h1><p>一般情况下，this 绑定给构造出的实例对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="string">"crane0"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Foo()</span><br><span class="line"><span class="built_in">console</span>.log(instance.bar)  <span class="comment">// crane0</span></span><br></pre></td></tr></table></figure>

<p>这牵扯到2个问题</p>
<ul>
<li><p><a href="https://javascript.ruanyifeng.com/oop/basic.html#toc2" target="_blank" rel="noopener">new 做了什么</a></p>
</li>
<li><p>构造函数和普通函数的区别</p>
</li>
</ul>
<h2 id="new-做了什么"><a href="#new-做了什么" class="headerlink" title="new 做了什么"></a>new 做了什么</h2><ul>
<li>创建一个空对象，作为将要返回的对象实例。</li>
<li>将这个空对象的原型，指向构造函数的prototype属性。</li>
<li>将这个空对象赋值给函数内部的this关键字。</li>
<li>开始执行构造函数内部的代码。</li>
</ul>
<p>简单实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj.__proto__ = Foo.prototype</span><br><span class="line">Foo.call(obj)</span><br></pre></td></tr></table></figure>

<h2 id="构造函数和普通函数的区别"><a href="#构造函数和普通函数的区别" class="headerlink" title="构造函数和普通函数的区别"></a>构造函数和普通函数的区别</h2><p>简单来说，普通函数指：内部没有this关键字的函数。</p>
<h2 id="new-调用返回值分析"><a href="#new-调用返回值分析" class="headerlink" title="new 调用返回值分析"></a>new 调用返回值分析</h2><p>当构造函数中出现了显式 return 的情况，有2种场景</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">"crane0"</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Foo()</span><br><span class="line"><span class="built_in">console</span>.log(instance.user) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>1，此时 instance 是返回的空对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">"crane0"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Foo()</span><br><span class="line"><span class="built_in">console</span>.log(instance.user) <span class="comment">// crane0</span></span><br></pre></td></tr></table></figure>
<p>2，此时 instance 是返回的目标对象实例 this。</p>
<div class="note success">
            <p>结论：如果构造函数中显式返回一个值，且是一个对象，那么 this 就指向这个返回的对象；如果返回的不是一个对象，那么 this 仍然指向实例。</p>
          </div>

<p>3，对普通函数使用new命令，则会返回一个空对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'this is a message'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msg = <span class="keyword">new</span> getMessage()</span><br><span class="line"><span class="built_in">console</span>.log(msg) <span class="comment">//空对象</span></span><br></pre></td></tr></table></figure>

<h2 id="箭头函数的-this"><a href="#箭头函数的-this" class="headerlink" title="箭头函数的 this"></a>箭头函数的 this</h2><ul>
<li>箭头函数使用 this 是根据外层（函数或者全局）上下文来决定。</li>
<li><strong>箭头函数的绑定无法被修改！</strong></li>
</ul>
<p>1，简单的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;  </span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(foo.fn()) <span class="comment">// window</span></span><br></pre></td></tr></table></figure>

<p>如果是箭头函数，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;  </span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(foo.fn()) <span class="comment">// &#123;fn: ƒ&#125;</span></span><br></pre></td></tr></table></figure>
<p>2，无法被修改的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = foo.call(obj1)</span><br><span class="line"><span class="built_in">console</span>.log(bar.call(obj2)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>foo() 的 this 已经绑定给 obj1，所以 bar（箭头函数）的 this 绑定给 obj1 了。</p>
<p>此时想将 bar() 的this 绑定给 obj2，发现失败了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.call(obj1)</span><br><span class="line"><span class="built_in">console</span>.log(bar.call(obj2))  <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<p>既然都是箭头函数，并且是在全局环境中，所以绑定已经没有效果了，this 指向 window。</p>
<p>注意，如果将 <code>var a = 123</code> 改为 <code>const a = 123</code>，输出为 undefined，</p>
<p>因为使用 const 声明的变量不会挂载到 window 全局对象当中。</p>
<h1 id="this-的优先级"><a href="#this-的优先级" class="headerlink" title="this 的优先级"></a>this 的优先级</h1><ul>
<li>new 调用</li>
<li>显示绑定： call、apply、bind 对 this 的绑定</li>
<li>隐式调用</li>
</ul>
<p>结论：new &gt; 显示 &gt; 隐式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj1.foo.call(obj2)  <span class="comment">// 2</span></span><br><span class="line">obj2.foo.call(obj1)  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>说明显示 &gt; 隐式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.bind(obj1)</span><br><span class="line">bar(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj1.a)  <span class="comment">// &#123;a: 2&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> bar(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(baz.a)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>bar 函数内部已经对将 this 绑定为 obj1，而当它作为构造函数，通过 new 调用时，返回的实例已经与 obj1 解绑。</p>
<p>说明 new &gt; 显示。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>this 很基础却很重要，本文系统的总结了 this 的各种情况，明白 this 的指向在工作中是很有必要，不会去犯一些低级错误。</p>
]]></content>
      <categories>
        <category>JavaScript 核心</category>
      </categories>
      <tags>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>base64编解码</title>
    <url>/2020/04/21/base64%E7%BC%96%E8%A7%A3%E7%A0%81/</url>
    <content><![CDATA[<p>window 自带的函数，可以进行 base64 编解码，兼容性非常好。</p>
<a id="more"></a>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/btoa" target="_blank" rel="noopener">MDN参考</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.btoa(<span class="string">"Hello, world"</span>) <span class="comment">// "SGVsbG8sIHdvcmxk"</span></span><br><span class="line"><span class="built_in">window</span>.atob(<span class="string">"SGVsbG8sIHdvcmxk"</span>) <span class="comment">// "Hello, world"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具方法</category>
      </categories>
      <tags>
        <tag>工具方法</tag>
      </tags>
  </entry>
</search>
